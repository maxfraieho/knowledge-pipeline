version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks:
      - exodus-net
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n:latest
    hostname: n8n
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    networks:
      - exodus-net
    restart: unless-stopped
    ports:
      - "5678:5678"  
    volumes:
      - n8n_storage:/home/node/.n8n   # <-- обираємо ІМЕНОВАНИЙ ТОМ
      # - ./n8n:/home/node/.n8n       # <-- або цей bind-mount (тоді прибери рядок вище)
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_NAME=${POSTGRES_DB}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_HOST=${N8N_HOST}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_RUNNERS_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy

networks:
  exodus-net:
    driver: bridge

volumes:
  postgres_storage:
  n8n_storage:
